import maya.cmds as cmds


# Collect Keyframe Data into a dictionary
def collectKeyframeData(currentObject):
    timeChanges = cmds.keyframe(currentObject, query=True, tc=True)
    #print "timeChanges: " + str(timeChanges)

    valueChanges = cmds.keyframe(currentObject, query=True, vc=True, at= ["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"])
    #print "valueChanges: " + str(valueChanges)

    if timeChanges == None:
        timeChanges = 0
        uniqueKeyframes = []
    else:
        uniqueKeyframes = sorted(set(timeChanges))
    #print "uniqueKeyframes: " + str(uniqueKeyframes)

    if valueChanges == None:
        valueChanges = []
        keyframeAmount = 0
    else:
        keyframeAmount = len(valueChanges)
    #print "length: " + str(keyframeAmount)
    
    # manage keyframe data into a dictionary
    keyframeDictionary = {}

    # create dictionary keys representing keyframes
    for i in range(len(uniqueKeyframes)):
        keyframeDictionary[uniqueKeyframes[i]] = []

    # append values of position data to keys
    for i in range(keyframeAmount):
         currentKeyframe = timeChanges[i]
         currentValue = valueChanges[i]
         #print "currentKeyframe: " + str(currentKeyframe) + " | currentValue: " + str(currentValue)
         keyframeDictionary[currentKeyframe].append(currentValue)

    return keyframeDictionary


# create locator and copy anim data
def copyAnimToLocator(object):
    keyframeDictionary = collectKeyframeData(object)
    locatorName = "loc_" + str(object) + "_copyAnim"
    cmds.spaceLocator(n = locatorName)
    for i in keyframeDictionary:
         cmds.currentTime(i, edit = True)
         constraintName = str(object) + "_currentFrame_parentConstraint"
         cmds.parentConstraint(object, locatorName, mo=0, name = constraintName)

         cmds.setKeyframe(locatorName, at="translateX")
         cmds.setKeyframe(locatorName, at="translateY")
         cmds.setKeyframe(locatorName, at="translateZ")
         cmds.setKeyframe(locatorName, at="rotateX")         
         cmds.setKeyframe(locatorName, at="rotateY")  
         cmds.setKeyframe(locatorName, at="rotateZ")  

         cmds.delete(constraintName)

def deleteAttributeKeys(object, attributeArray):
    keyframeDictionary = collectKeyframeData(object)
    for f in keyframeDictionary:
        currentFrame = int(f)
        for a in attributeArray:
             cmds.cutKey(object, time = (currentFrame, currentFrame), at = str(a))
         


# deletes animation of object, copies to source object
def reanimateToObject(reanimatedObject,sourceAnimObject):
    sourceAnimKeyframeDictionary = collectKeyframeData(sourceAnimObject)
    keyedAttributes = ["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"]
    deleteAttributeKeys(reanimatedObject, keyedAttributes)

    for i in sourceAnimKeyframeDictionary:
         cmds.currentTime(i, edit = True)
         constraintName = str(reanimatedObject) + "_currentFrame_parentConstraint"
         cmds.parentConstraint(sourceAnimObject, reanimatedObject, mo=0, name = constraintName)

         cmds.setKeyframe(reanimatedObject, at="translateX")
         cmds.setKeyframe(reanimatedObject, at="translateY")
         cmds.setKeyframe(reanimatedObject, at="translateZ")
         cmds.setKeyframe(reanimatedObject, at="rotateX")         
         cmds.setKeyframe(reanimatedObject, at="rotateY")  
         cmds.setKeyframe(reanimatedObject, at="rotateZ")  

         cmds.delete(constraintName)

def reanimateToWorldSpace(object):
    objectLocator = "loc_" + str(object) + "_copyAnim"
    copyAnimToLocator(object)
    cmds.parent(object, w=1)
    reanimateToObject(object, objectLocator)
    cmds.delete(objectLocator)

def removeUnicode(unicode):
     unicodeString = str(unicode)
     return unicodeString[3:len(unicode)-3]

selectedObject = removeUnicode(cmds.ls(sl=True))

reanimateToWorldSpace(selectedObject)
